# -*- coding = utf-8 -*-
# @File Name : quantification
# @Date : 2024/10/22 23:39
# @Author : zhiweideng
# @E-mail : zhiweide@usc.edu


import os
import math
import numpy as np
import SimpleITK as sitk

from skan import csr
from torch.utils.hipify.hipify_python import meta_data
from tqdm import tqdm
from scipy.stats import ttest_ind
from matplotlib import pyplot as plt
from scipy.ndimage import binary_fill_holes
from skimage.morphology import binary_erosion, remove_small_objects, skeletonize_3d


def hard_segment(res_image, mask_image, thresh):
    res_image = res_image > thresh
    res_image = np.multiply(res_image, mask_image)
    res_image = remove_small_objects(res_image, min_size=40)
    return res_image


def radius_analysis(radius_data, binary_res, spacing):
    vox_size = np.mean(spacing)
    # mask the radius volume
    indices = np.where(binary_res > 0)
    vessel_radiis = radius_data[indices[0], indices[1], indices[2]] * vox_size * 2
    return np.mean(vessel_radiis), np.std(vessel_radiis)


def density_analysis(binary_res, mask_image, spacing):
    pixel_vol = np.prod(spacing)
    total_volume = np.sum(mask_image > 0.0) * pixel_vol
    vessel_volume = np.sum(binary_res) * pixel_vol
    density_ratio = vessel_volume / total_volume
    return density_ratio


def length_analysis(binary_res, mask_image, spacing):
    skeleton = skeletonize_3d(binary_res)
    skel_info = csr.Skeleton(skeleton)
    pixel_vol = np.prod(spacing)
    total_volume = np.sum(mask_image > 0.0) * pixel_vol
    # Print branch lengths
    print(np.sum(skel_info.path_lengths()) / total_volume)


def get_small_vessel_seg(radius_data, binary_res, spacing):
    vox_size = np.mean(spacing)
    vessel_radius = radius_data * vox_size * 2
    small_vessel = vessel_radius < 1.02
    small_vessel = np.multiply(small_vessel, binary_res)
    return small_vessel


def single_analysis(subject, threshold):
    print(subject['subject_name'], subject['moca'])
    flux_image = subject['flux']
    rads_image = sitk.GetArrayFromImage(sitk.ReadImage(subject['rads']))
    mask_image = binary_fill_holes(subject['mask'] > 0.0)
    mask_image = binary_erosion(mask_image, footprint=np.ones((5, 5, 5)))

    # hard segmentation
    bin_res_a = hard_segment(flux_image, mask_image, threshold)
    bin_res_s = get_small_vessel_seg(rads_image, bin_res_a, subject['spacings'])

    vessel_seg_img = sitk.GetImageFromArray(bin_res_a * 1.0)
    vessel_seg_img.CopyInformation(sitk.ReadImage(subject['rads']))
    sitk.WriteImage(vessel_seg_img, './{}_seg.nii.gz'.format(subject['subject_name']))

    small_vessel_seg_img = sitk.GetImageFromArray(bin_res_s * 1.0)
    small_vessel_seg_img.CopyInformation(sitk.ReadImage(subject['rads']))
    sitk.WriteImage(small_vessel_seg_img, './{}_small.nii.gz'.format(subject['subject_name']))

    # perform density analysis
    # density_ratio_a = density_analysis(bin_res_a, mask_image, subject['spacings'])
    # density_ratio_s = density_analysis(bin_res_s, mask_image, subject['spacings'])
    # print('density ratio: {}, small density ratio: {}'.format(density_ratio_a, density_ratio_s))
    #
    # # perform radius analysis
    # mean_rad_a, std_rad_a = radius_analysis(rads_image, bin_res_a, subject['spacings'])
    # mean_rad_s, std_rad_s = radius_analysis(rads_image, bin_res_s, subject['spacings'])
    # # mean_rad_s *= 0.55
    # print('mean rad: {}, std rad: {}'.format(mean_rad_a, std_rad_a))
    # print('small mean rad: {}, small std rad: {}'.format(mean_rad_s, std_rad_s))

    # perform length analysis
    # length_analysis(bin_res_a, mask_image, subject['spacings'])
    # length_analysis(bin_res_s, mask_image, subject['spacings'])
    # print(lens_as, lens_ss)


def group_analysis(subjects, threshold):
    for subject in tqdm(subjects, ncols=80, ascii=True):
        single_analysis(subject, threshold)


def load_data(splits, folder):
    subjects = []
    for split in splits:
        split_folder = folder.format(split)
        flux_folder = os.path.join(split_folder, 'flux')
        mask_folder = os.path.join(split_folder, 'mask')
        rads_folder = os.path.join(split_folder, 'rads')
        # read the files
        flux_files = os.listdir(flux_folder)
        for flux_file in tqdm(flux_files, ncols=80, ascii=True):
            subject_name = flux_file.split('.')[0].split('_')[1]
            # if subject_name != '1102684':   # '1102747': #young
            #     continue
            if subject_name != '1102833': #old
                continue
            flux_path = os.path.join(flux_folder, 'flux_{}.nii.gz'.format(subject_name))
            mask_path = os.path.join(mask_folder, 'mask_{}.nii.gz'.format(subject_name))
            rads_path = os.path.join(rads_folder, 'rads_{}.nii.gz'.format(subject_name))
            flux_image = sitk.ReadImage(flux_path)
            mask_image = sitk.ReadImage(mask_path)
            # rads_image = sitk.ReadImage(rads_path)

            flux = sitk.GetArrayFromImage(flux_image)
            mask = sitk.GetArrayFromImage(mask_image)
            # rads = sitk.GetArrayFromImage(rads_image)
            spacings = flux_image.GetSpacing()
            if flux.shape[0] < 200:
                continue

            curr_subject = {
                'subject_name': subject_name,
                'flux': flux,
                'mask': mask,
                'rads': rads_path,
                'spacings': spacings,
                'moca': MOCA_scores[subject_name] if subject_name in MOCA_scores.keys() else -1,
            }
            subjects.append(curr_subject)
    return subjects


if __name__ == '__main__':
    from scipy.stats import ttest_ind
    _threshold = 0.0825
    _splits = ['train', 'valid']
    _folder = '../tests/7T/{}-ADAPTIVE_LC-2024-08-08-17-25/'
    MOCA_scores = {'1102684': 27, '1102714': 11, '1102693': 28, '1102035': 26, '1102716': 25, '1102724': 24,
                   '1101793': 28, '1102017': 27, '1102747': 29, '1101939': 16, '1102741': 10, '1102742': 14,
                   '1102011': 22, '1102766': 29, '1102765': 28, '1102138': 26, '1102530': 20, '1102833': 22,
                   '1102844': 29, '1102871': 27, '1102687': 28, '1102861': 17, '1102890': 11, '1102736': -1,
                   '1102840': 12, '1102905': 20, '1102843': 20, '1102926': -1, '1102799': -1, '1102076': -1,
                   '1102912': -1, '1102924': 25, '1102860': -1, '1102094': -1, '1103040': -1, '1103924': -1,
                   '1103095': -1, '1103122': -1}

    _subjects = load_data(_splits, _folder)
    # print(_subjects)
    group_analysis(_subjects, _threshold)


    """
    # results = [[1102741, 10, 0.0068415330462290895, 0.00028289624031425725, 1.5490161205465705, 0.5100201825855363, 0.9461267816175131, 0.05121314557083812], [1102766, 29, 0.009569869972544328, 0.0006683577014710813, 1.4442990440195833, 0.4607785977452762, 0.94820852608802, 0.045119315994302585], [1102716, 25, 0.011917366030065579, 0.0007252935199374937, 1.5750934942224033, 0.6152900986857084, 0.9405470798592761, 0.05087913964834355], [1102799, -1, 0.01057409146513932, 0.00012153508442936384, 1.7215645123535612, 0.7082404521587643, 0.9520739066968006, 0.05705199622806499], [1101939, 16, 0.006311248906728105, 0.00014893667962490972, 1.701651124421267, 0.6101140159668091, 0.9381372359321666, 0.05291664792665935], [1102094, -1, 0.008047325297961405, 3.771396660351481e-05, 1.6746052722833076, 0.5883945313400988, 0.9411696179384683, 0.07303925364970273], [1102765, 28, 0.010026909954862707, 0.0006770593906532417, 1.4858308291002207, 0.5239191479932661, 0.9434445171257414, 0.04945850706139213], [1102530, 20, 0.00656886431792944, 0.0004316246712877659, 1.5257556050244256, 0.5641949362138, 0.9458221895887133, 0.04735644703653737], [1101793, 28, 0.011001080480398093, 0.0005349775965439288, 1.5579330407485243, 0.6344121571249427, 0.9474194520143406, 0.04639085666580934], [1102742, 14, 0.00803730182095543, 0.00024919293262938867, 1.6586601698315235, 0.5776428415890958, 0.9470811808369157, 0.05039265904193803], [1102684, 27, 0.00827396584770431, 0.0008057775242835517, 1.4263633865104672, 0.46920241034031196, 0.9397339552286297, 0.05160331823893504], [1102714, 11, 0.00428768919818512, 0.00030564844351304405, 1.5390257419519404, 0.6079474477576194, 0.951943131956343, 0.04120137181608801], [1102568, -1, 0.0094278498668052, 0.0007188843713916535, 1.5171987338483102, 0.5441005448690576, 0.9459825829585587, 0.04582965158462692], [1102833, 22, 0.008309106951603596, 0.00027474586386674145, 1.6469291257612353, 0.6375135876232646, 0.941535705095016, 0.05122888990577866], [1102076, -1, 0.009103445460408394, 7.263013930460718e-05, 1.7832747322264284, 0.7306793165812746, 0.9573654993793945, 0.04952651965727806], [1102138, 26, 0.008653788832945923, 0.0005594873836196178, 1.5795667640393096, 0.6622748711136967, 0.9455277906923447, 0.04693171284081555], [1102724, 24, 0.009752057713814596, 0.0008814664503334119, 1.5374108296977378, 0.6547575026055054, 0.9428013671243467, 0.04737449831860256], [1102035, 26, 0.010187506692765766, 0.0007370361215276366, 1.5408263624674523, 0.5404477491182573, 0.9429909953193469, 0.04909788351531495], [1102011, 22, 0.008578023237702464, 0.000545461693647159, 1.4990576334489643, 0.5672951318022234, 0.9467750419767441, 0.04525908380946299], [1102017, 27, 0.008235452996207598, 0.0003704468154842982, 1.5231671250722778, 0.5788128504474752, 0.9507190008617948, 0.045194280418336404], [1102736, -1, 0.01010281020222752, 6.958908420339938e-05, 1.670785562714611, 0.5785377245432314, 0.9581800798139378, 0.04330546807399682], [1102840, 12, 0.004551672561475724, 8.16919740023462e-06, 1.8963701185615482, 0.7234331143551541, 0.9372760208263072, 0.07329157167779624], [1102747, 29, 0.0070281598609965796, 0.0004694481000137207, 1.504150984294365, 0.4953188193811805, 0.9462313841131123, 0.047340612669221016], [1102843, 20, 0.005835914226373041, 3.19936500427733e-05, 1.7189053714405722, 0.58195200371702, 0.9475249557787212, 0.062485099953481005], [1102871, 27, 0.005930546299416233, 0.0002740802281185345, 1.5461325973923528, 0.512901213335495, 0.9300804908878092, 0.06161948889665022], [1102905, 20, 0.006355850483034516, 3.537678392286919e-05, 1.7103819372876985, 0.5898121132655342, 0.9512404380060101, 0.0508402197187245], [1102844, 29, 0.0064103812592951875, 0.0002827786548420025, 1.5931086057284618, 0.6062273127459242, 0.9474235375032551, 0.04715576555521938], [1102926, -1, 0.007261012532004026, 0.0001357279539170204, 1.6219467052523544, 0.5850730394145347, 0.9396606397084095, 0.05434812368306538]]
    # results = [[1102741, 10, 0.00705761984233629, 0.001850587284615511, 1.5451398024637946, 0.5080874003164553, 1.083891413177061, 0.08241435852372903],[1102766, 29, 0.009836879422818353, 0.0034932596757750547, 1.441440335448493, 0.4588431676415498, 1.0720567190323333, 0.08261368451565265],[1102716, 25, 0.012252979168952488, 0.0034216383903085327, 1.5751360212784304, 0.6215916975857776, 1.0673788335670673, 0.0879129812035501],[1102799, -1, 0.010886270962070038, 0.0019256921584065647, 1.7245815281482566, 0.7141148907632676, 1.1102637267852724, 0.06759915702997785],[1101939, 16, 0.006646085174677013, 0.0011309736339960193, 1.695227324162132, 0.6086789503886217, 1.0901083741862723, 0.08407956493932396],[1102094, -1, 0.008319225394824875, 0.0009963303411651486, 1.6741449714926544, 0.5936854794586314, 1.1256312103347828, 0.06317433206143817],[1102765, 28, 0.010303211550906025, 0.003572844693603752, 1.4823763605844278, 0.522330688998472, 1.0726141433016367, 0.08528391095618897],[1102530, 20, 0.006781063752856173, 0.0023794979996616347, 1.521610354207376, 0.561381691520993, 1.0736413634075508, 0.08290172305250129],[1101793, 28, 0.011327819991554574, 0.003227176445849269, 1.5578715834078007, 0.6396360051266468, 1.0794150029237939, 0.08189083023612387],[1102742, 14, 0.008305153867056745, 0.0017645342115250261, 1.6542511981807027, 0.5760963188953325, 1.0865648005719775, 0.08136417969024054],[1102684, 27, 0.008533777968470015, 0.0033920521046388453, 1.4236687007745221, 0.46833099102031084, 1.0600444873981474, 0.08967512931019303],[1102714, 11, 0.004472464355748511, 0.0016798372900850948, 1.5358301528024743, 0.6072524234619123, 1.0719088484262056, 0.08004846849613867],[1102568, -1, 0.009687669045511403, 0.003314389118823566, 1.5156560132142685, 0.5446784289759913, 1.0662383782091427, 0.08509941129568473],[1102833, 22, 0.00864421527657007, 0.0019136302771331946, 1.6426716866769915, 0.638862151750508, 1.0861353905012139, 0.0838535629596649],[1102076, -1, 0.009403092035130525, 0.0015314789373766019, 1.7811622245630707, 0.7303629168140595, 1.1160644498784227, 0.06358922130784897],[1102138, 26, 0.008921516259943441, 0.002875190093004554, 1.5781838581415097, 0.6608981275037407, 1.0711486137445192, 0.08413203095404496],[1102724, 24, 0.010055731755039597, 0.0037156942617504363, 1.5359768859557836, 0.6562696554965713, 1.060446974105852, 0.0873424160053833],[1102035, 26, 0.01047640720805888, 0.0032993259513716443, 1.538289538692145, 0.5402692251161643, 1.064686152583797, 0.08726139833635466],[1102011, 22, 0.008842371135161448, 0.002943388372006766, 1.4979112276525928, 0.5670477323189487, 1.0737066969243296, 0.08315011183668211],[1102017, 27, 0.008489966522473644, 0.002627687040232668, 1.5208530684568196, 0.5771839242938647, 1.0850173267598135, 0.07813304348838576],[1102736, -1, 0.010423114389449189, 0.001462509830103612, 1.669804642470949, 0.5801061187405959, 1.118772454201499, 0.06301607111329213],[1102840, 12, 0.004784636077337415, 0.00025721974814238733, 1.890961420301175, 0.7201829100900214, 1.1302641770951647, 0.061723146768251635],[1102747, 29, 0.007246748941362541, 0.002390479964694157, 1.501433686332942, 0.4944595136813833, 1.0704422096176422, 0.08402806718303299],[1102843, 20, 0.006043522262401019, 0.0008199519307547351, 1.717111305995615, 0.5826588554207149, 1.1227543093879573, 0.0626966429099439],[1102871, 27, 0.006208806575426633, 0.0015539328038008853, 1.5414335201440925, 0.5121159162801999, 1.0771269317074579, 0.09235472480401331],[1102905, 20, 0.006632611900215027, 0.0007567635281685502, 1.710425448697128, 0.5936025609244945, 1.120711744410003, 0.06373302372942599],[1102844, 29, 0.006648782707832548, 0.0018227455683609741, 1.5930616046247974, 0.6089767633781195, 1.0805566866540512, 0.08076250951323447],[1102926, -1, 0.007524219374184193, 0.0015542443292223824, 1.6183179205065663, 0.5842841365752076, 1.1066480272748838, 0.07555479379446163]]
    results = [[1102741,10,0.00705761984233629,0.0027506271858124655,1.5451398024637946,0.5080874003164553,1.1379975681797174,0.1042068038468378],[1102766,29,0.009836879422818353,0.0047225070436573,1.441440335448493,0.4588431676415498,1.1179215815575099,0.10603489665141606],[1102716,25,0.012252979168952488,0.004757342126976164,1.5751360212784304,0.6215916975857776,1.1185374469424965,0.11178733346110425],[1102799,-1,0.010886270962070038,0.003272223960033564,1.7245815281482566,0.7141148907632676,1.1676458793721087,0.08796475049077358],[1101939,16,0.006646085174677013,0.0018443335011488415,1.695227324162132,0.6086789503886217,1.1520177809261727,0.10359502626259882],[1102094,-1,0.008319225394824875,0.002087544827702695,1.6741449714926544,0.5936854794586314,1.1913235348433189,0.07922341776442243],[1102765,28,0.010303211550906025,0.004898556886402294,1.4823763605844278,0.522330688998472,1.120113452419982,0.10775379489056106],[1102530,20,0.006781063752856173,0.003221238886528951,1.521610354207376,0.561381691520993,1.1191748791492224,0.10560635891873771],[1101793,28,0.011327819991554574,0.004615512899059742,1.5578715834078007,0.6396360051266468,1.130347451487672,0.1047246066752906],[1102742,14,0.008305153867056745,0.002702279462332046,1.6542511981807027,0.5760963188953325,1.1431942305197695,0.10318055845283478],[1102684,27,0.008533777968470015,0.004460455151282464,1.4236687007745221,0.46833099102031084,1.1050386345170593,0.11287826317145],[1102714,11,0.004472464355748511,0.0021923578000373075,1.5358301528024743,0.6072524234619123,1.1128385885422372,0.10292952240568315],[1102568,-1,0.009687669045511403,0.0044297806195524835,1.5156560132142685,0.5446784289759913,1.112094604023319,0.1089738113659454],[1102833,22,0.00864421527657007,0.002974174836501065,1.6426716866769915,0.638862151750508,1.1443824272611423,0.10460115963857285],[1102076,-1,0.009403092035130525,0.002689673158793119,1.7811622245630707,0.7303629168140595,1.1734679842695264,0.08375839362487471],[1102138,26,0.008921516259943441,0.003927589260882297,1.5781838581415097,0.6608981275037407,1.1186825773922704,0.10759998672555968],[1102724,24,0.010055731755039597,0.00486751178185219,1.5359768859557836,0.6562696554965713,1.1048573553448713,0.11126982790172905],[1102035,26,0.01047640720805888,0.0044555563359018205,1.538289538692145,0.5402692251161643,1.1124264035982787,0.11116250368808006],[1102011,22,0.008842371135161448,0.004070345929704118,1.4979112276525928,0.5670477323189487,1.1220576611963249,0.10646318095414366],[1102017,27,0.008489966522473644,0.00377750791614445,1.5208530684568196,0.5771839242938647,1.1348360538798992,0.10084818224508225],[1102736,-1,0.010423114389449189,0.0027575927583612454,1.669804642470949,0.5801061187405959,1.1805997252821991,0.0825347461364438],[1102840,12,0.004784636077337415,0.0006488385035136346,1.890961420301175,0.7201829100900214,1.205033942866655,0.0753021482188346],[1102747,29,0.007246748941362541,0.0032246397378093102,1.501433686332942,0.4944595136813833,1.1164061467743065,0.10724828826214296],[1102843,20,0.006043522262401019,0.0015661377265668364,1.717111305995615,0.5826588554207149,1.1834805775733162,0.08066148615160018],[1102871,27,0.006208806575426633,0.0024196276123949994,1.5414335201440925,0.5121159162801999,1.1390803236987193,0.11252478200157064],[1102905,20,0.006632611900215027,0.0015236631011689339,1.710425448697128,0.5936025609244945,1.1866717224176822,0.0819970574706393],[1102844,29,0.006648782707832548,0.0026357405825684446,1.5930616046247974,0.6089767633781195,1.1326296899586221,0.10414795122444508],[1102926,-1,0.007524219374184193,0.00268442503601407,1.6183179205065663,0.5842841365752076,1.1666370622945883,0.09273893756515811]]

    plt.style.use('ggplot')

    figure = plt.figure()
    subject_ids = []
    moca_scores = []
    vessel_density_as = []
    vessel_density_ss = []
    vessel_size_as = []
    vessel_size_ss = []

    for result in results:
        subject_id = result[0]
        if result[1] == -1:
            continue
        subject_ids.append(subject_id)
        moca_scores.append(result[1])
        vessel_density_as.append(result[2])
        vessel_density_ss.append(result[3])
        vessel_size_as.append(result[4] / 1.3)
        vessel_size_ss.append(result[6] / 1.3)
        print(result[0],result[1],result[2],result[3],result[4],result[5],result[6]/1.3,result[7])

    m, b = np.polyfit(vessel_density_ss, moca_scores, 1)
    print(len(moca_scores), subject_ids)
    plt.scatter(vessel_density_ss, moca_scores, marker='o', color='red', label='density_all')
    plt.plot(vessel_density_ss, m * np.array(vessel_density_ss) + b)
    r = np.corrcoef(vessel_density_ss, moca_scores)
    # r = ttest_ind(vessel_density_ss, moca_scores)
    print(r)

    plt.xlabel('Small Vessel Density')
    plt.ylabel('MOCA Score')
    print(m)
    plt.show()
    """
